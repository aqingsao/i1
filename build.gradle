allprojects {
    group = 'com.thoughtworks.i1'
    version = '0.1.0'

    apply plugin: 'java'
    apply plugin: 'idea'
}

subprojects {
    repositories {
        mavenLocal();
        mavenCentral()
        mavenRepo url: "https://code.lds.org/nexus/content/groups/main-repo";
        mavenRepo url: "http://download.java.net/maven/2", artifactUrls: ["http://maven.springframework.org/milestone", "https://repository.jboss.org/nexus/content/groups/public/", "http://mvnrepository.com/artifact"]
    }
    project.ext{
        jerseyVersion = '1.16'
        guiceVersion="3.0"
        guavaVersion = '13.0.1'
        jacksonVersion = '2.1.2'
        flywayVersion = '2.0.2'
        slf4jVersion = '1.7.2'
        logbackVersion = '1.0.7'

        jettyVersion='9.0.0.M3'

        hamCrestVersion = '1.1'
        mockitoVersion = '1.9.5-rc1'
        junitVersion = '4.10'

    }

    sourceCompatibility = '1.7'

    idea {
        module {
            inheritOutputDirs = false
            print project.name + " output dir: " + sourceSets.main.output.resourcesDir
            outputDir = file("out")
            testOutputDir = file("out")

            excludeDirs += file("out")
        }
    }
    apply plugin: 'signing'
    apply plugin: 'java'
    apply plugin: 'maven'

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

//            repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'I1'
                    packaging 'jar'
                    description 'A collection of reusable Java components'
                    url 'https://github.com/aqingsao/i1'

                    scm {
                        url 'scm:git@github.com:aqingsao/i1.git'
                        connection 'scm:git@github.com:aqingsao/i1.git'
                        developerConnection 'scm:git@github.com:aqingsao/i1.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'aqingsao'
                            name 'Xiaoqing Zhang'
                        }
                    }
                }
            }
        }
    }

    if(project.name == 'i1-commons' || project.name == 'i1-test-commons'){
        return;
    }

    apply plugin: "war"
    apply plugin: "jetty"

    // Since it's a war project, we add src/main/webapp as a resource folder
    sourceSets {
        main {
            resources {
                srcDirs += 'src/main/webapp'
            }
        }
    }

    // You could enable debug by "gradle jettyRun -Pdebug=true" or "gradle jettyRun -Pdebug"
    if(project.hasProperty("debug")){
        println "debug mode is enabled"
        project.ext{
            GRADLE_OPTS='-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
        }
    }

    dependencies {
        compile project(':i1-commons')

        testCompile project(':i1-test-commons')
    }

    // In default we use port 8051 when we run webapp with "gradle clean jettyRun"
    httpPort = 8051
}
